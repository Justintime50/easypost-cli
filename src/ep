#!/bin/bash

################################################
# EASYPOST CLI
# https://github.com/Justintime50/easypost-cli
# Author: Justintime50
################################################

# Import config
# shellcheck disable=SC1090
source "$HOME"/.easypost-cli/.config

# Check that variables are set
if [[ -z "$EASYPOST_CLI_API_KEY" ]] || [[ -z "$EASYPOST_CLI_API_KEY" ]] || [[ -z "$EASYPOST_CLI_API_KEY" ]] ; then
    echo "The EasyPost CLI is misconfigured, please see the ep executable and fix any variables that aren't set correctly."
    exit 1
fi

# Endpoint Functions

function create-child-user {
    # ep create-child-user: Create a child user (requires production API key)
    # Prompt user for input
    echo "Enter child user name:"
    read -r USER
    
    # Build curl request
    curl -s -X POST "$EASYPOST_API_URL"/users \
    -u "$EASYPOST_CLI_API_KEY": \
    -d "user[name]=$USER" \
    | json_pp
}

function retrieve-api-keys {
    # ep retrieve-api-keys: Retrieve the API keys of the associated account
    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/api_keys \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-carrier-account {
    # ep retrieve-carrier-account: Retrieve a single configured carrier account
    # Prompt user for input
    echo "Enter carrier account ID:"
    read -r CARRIER

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/carrier_accounts/"$CARRIER" \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-carrier-accounts {
    # ep retrieve-carrier-accounts: Retrieve the list of configured carrier accounts
    
    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/carrier_accounts \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-carrier-types {
    # ep retrieve-carrier-types: Retrieve the list of all carrier types available to the account of the given API key.
    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/carrier_types \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-user {
    # ep retrieve-user: Retrieve the users of the associated account
    # Prompt user for input
    echo "Enter user ID:"
    read -r USER
    
    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/users/"$USER" \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-users {
    # ep retrieve-users: Retrieve the users of the associated account
    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/users \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function create-address {
    # ep create-address: Create an address record
    # Prompt user for input
    echo "Enter street1:"
    read -r STREET1
    echo "Enter street2 (optional):"
    read -r STREET2
    echo "Enter city:"
    read -r CITY
    echo "Enter state:"
    read -r STATE
    echo "Enter zip:"
    read -r ZIP
    echo "Enter country (optional):"
    read -r COUNTRY
    echo "Enter name (optional):"
    read -r NAME
    echo "Enter company (optional):"
    read -r COMPANY
    echo "Enter phone (optional):"
    read -r PHONE
    echo "Enter email (optional):"
    read -r EMAIL

    # TODO: Prompt to verify address or not

    # Build Curl Request
    curl -s -X POST "$EASYPOST_API_URL"/addresses \
    -u "$EASYPOST_CLI_API_KEY": \
    -d "address[street1]=$STREET1" \
    -d "address[street2]=$STREET2" \
    -d "address[city]=$CITY" \
    -d "address[state]=$STATE" \
    -d "address[zip]=$ZIP" \
    -d "address[country]=$COUNTRY" \
    -d "address[name]=$NAME" \
    -d "address[company]=$COMPANY" \
    -d "address[phone]=$PHONE" \
    -d "address[email]=$EMAIL" \
    | json_pp
}

function retrieve-address {
    # ep retrieve-address: Retrieve an address record
    # Prompt user for input
    echo "Enter address ID:"
    read -r ADDRESS

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/addresses/"$ADDRESS" \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-addresses {
    # ep retrieve-addresses: Retrieve a list of addresses

    # TODO: Add date and page_size options

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/addresses \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function add-shipment-to-batch {
    # ep add-shipment-to-batch: Add a shipment to a batch
    # Prompt user for input
    echo "Enter a batch ID to add shipments to:"
    read -r BATCH
    echo "Enter a shipment ID to add to the batch:"
    read -r SHIPMENT

    # TODO: Allow multiple batches to be iterated here, separated by commas or something similar

    # Build curl request
    curl -s -X POST "$EASYPOST_API_URL"/batches/"$BATCH"/add_shipments \
    -u "$EASYPOST_CLI_API_KEY": \
    -d "shipments[0][id]=$SHIPMENT" \
    | json_pp
}

function create-batch {
    # ep create-batch: Create an empty batch object
    
    # Build curl request
    curl -s -X POST "$EASYPOST_API_URL"/batches \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function generate-batch-label {
    # ep generate-batch-label: Generate a label for a batch of shipments
    # Prompt user for input
    FORMAT="null"
    echo "Enter a batch ID to generate a label for:"
    read -r BATCH
    while ! [[ $FORMAT = "pdf" ]] || [[ $FORMAT = "PDF" ]] || [[ $FORMAT = "zpl" ]] || [[ $FORMAT = "ZPL" ]] || [[ $FORMAT = "epl2" ]] || [[ $FORMAT = "EPL2" ]] ; do
        echo "Enter a label format (options: pdf, zpl, epl2):"
        read -r FORMAT
        if [[ -z "$FORMAT" ]] ; then
            echo "Format cannot be blank"
        fi
    done

    # Allow the user to choose
    # Build curl request
    curl -s -X POST "$EASYPOST_API_URL"/batches/"$BATCH"/label \
    -u "$EASYPOST_CLI_API_KEY": \
    -d "label_format=$FORMAT" \
    | json_pp
}

function remove-shipment-from-batch {
    # ep remove-shipment-from-batch: Remove a shipment from a batch
    # Prompt user for input
    echo "Enter a batch ID to remove shipments from:"
    read -r BATCH
    echo "Enter a shipment ID to remove from the batch:"
    read -r SHIPMENT

    # TODO: Allow multiple batches to be iterated here, separated by commas or something similar

    # Build curl request
    curl -s -X POST "$EASYPOST_API_URL"/batches/"$BATCH"/remove_shipments \
    -u "$EASYPOST_CLI_API_KEY": \
    -d "shipments[0][id]=$SHIPMENT" \
    | json_pp
}

function buy-shipment {
    # ep buy-shipment: Buy a label for the specified shipment
    # Prompt user for input
    echo "Enter shipment ID:"
    read -r SHIPMENT
    echo "Enter rate ID:"
    read -r RATE
    echo "Enter insurance amount (optional):"
    read -r INSURANCE

    # Build curl request
    curl -s -X POST "$EASYPOST_API_URL"/shipments/"$SHIPMENT"/buy \
    -u "$EASYPOST_CLI_API_KEY": \
    -d "rate[id]=$RATE" \
    -d "insurance=$INSURANCE" \
    | json_pp
}

function refund-shipment {
    # ep refund-shipment: Refund a specified shipment
    # Prompt user for input
    echo "Enter shipment ID:"
    read -r SHIPMENT

    # Build curl request
    curl -s -X POST "$EASYPOST_API_URL"/shipments/"$SHIPMENT"/refund \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function regenerate-rates {
    # ep regenerate-rates: Regenerate rates for a shipment
    # Prompt user for input
    echo "Enter shipment ID:"
    read -r SHIPMENT

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/shipments/"$SHIPMENT"/rates \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function help {
    # ep help: Show the docs
    cat "$EASYPOST_CLI_HOME_LOCATION"/man.md
    # open https://github.com/Justintime50/easypost-cli/blob/master/docs/man.md
}

function update-api-key {
    # ep update-api-key: Update the stored API key in the EasyPost CLI config file
    echo "Enter your EasyPost API key:"
    read -r EASYPOST_CLI_API_KEY
    sed -i '' "s/EASYPOST_CLI_API_KEY=.*/EASYPOST_CLI_API_KEY=$EASYPOST_CLI_API_KEY/" "$EASYPOST_CLI_HOME_LOCATION"/.config
    echo "Your EasyPost API key has been updated!"
}

function version {
    # ep version: Show the EasyPost CLI version info
    echo "EasyPost CLI - v0.1"
}

function create-insurance {
    # ep create-insurance: Create an insurance record for shipments not from EasyPost
    # Prompt user for input
    echo "Enter to address ID:"
    read -r TO_ADDRESS
    echo "Enter from address ID:"
    read -r FROM_ADDRESS
    echo "Enter tracking code from the carrier:"
    read -r TRACKING
    echo "Enter carrier (optional, recommended):"
    read -r CARRIER
    echo "Enter external reference ID (optional):"
    read -r REFERENCE
    echo "Enter amount to insure:"
    read -r AMOUNT

    # Build Curl Request
    curl -s -X POST "$EASYPOST_API_URL"/insurances \
    -u "$EASYPOST_CLI_API_KEY": \
    -d "insurance[to_address][id]=$TO_ADDRESS" \
    -d "insurance[from_address][id]=$FROM_ADDRESS" \
    -d "insurance[tracking_code]=$TRACKING" \
    -d "insurance[carrier]=$CARRIER" \
    -d "insurance[reference]=$REFERENCE" \
    -d "insurance[amount]=$AMOUNT" \
    | json_pp
}

function retrieve-insurance {
    # ep retrieve-insurance: Retrieve an insurnace record
    # Prompt user for input
    echo "Enter insurance ID:"
    read -r INSURANCE

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/insurances/"$INSURANCE" \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-insurances {
    # ep retrieve-insurances: Retrieve a list of insurances

    # TODO: Add date and page_size options

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/insurances \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function create-parcel {
    # ep create-parcel: Create a parcel record
    # Prompt user for input
    echo "Enter parcel length:"
    read -r LENGTH
    echo "Enter parcel width:"
    read -r WIDTH
    echo "Enter parcel height:"
    read -r HEIGHT
    echo "Enter parcel weight:"
    read -r WEIGHT

    # Build curl request
    curl -s -X POST "$EASYPOST_API_URL"/parcels \
    -u "$EASYPOST_CLI_API_KEY": \
    -d "parcel[length]=$LENGTH" \
    -d "parcel[width]=$WIDTH" \
    -d "parcel[height]=$HEIGHT" \
    -d "parcel[weight]=$WEIGHT" \
    | json_pp
}

function retrieve-parcel {
    # ep retrieve-parcel: Retrieve a parcel record
    # Prompt user for input
    echo "Enter parcel ID:"
    read -r PARCEL

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/parcels/"$PARCEL" \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-parcels {
    # ep retrieve-parcels: Retrieve a list of parcels

    # TODO: Add date and page_size options

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/parcels \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function create-payment-log-report {
    # ep create-payment-log-report: Create a payment log report
    # Prompt user for input
    echo "Enter a start date (eg: 2016-10-01):"
    read -r STARTDATE
    echo "Enter an end date (eg: 2016-10-31):"
    read -r ENDDATE

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/reports/payment_log/"$REPORT" \
    -u "$EASYPOST_CLI_API_KEY": \
    -d "{'start_date':$STARTDATE,'end_date':$ENDDATE}" \
    | json_pp
}

function create-refund-report {
    # ep create-refund-report: Create a payment log report
    # Prompt user for input
    echo "Enter a start date (eg: 2016-10-01):"
    read -r STARTDATE
    echo "Enter an end date (eg: 2016-10-31):"
    read -r ENDDATE

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/reports/refund/"$REPORT" \
    -u "$EASYPOST_CLI_API_KEY": \
    -d "{'start_date':$STARTDATE,'end_date':$ENDDATE}" \
    | json_pp
}

function create-shipment-report {
    # ep create-shipment-report: Create a payment log report
    # Prompt user for input
    echo "Enter a start date (eg: 2016-10-01):"
    read -r STARTDATE
    echo "Enter an end date (eg: 2016-10-31):"
    read -r ENDDATE

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/reports/shipment/"$REPORT" \
    -u "$EASYPOST_CLI_API_KEY": \
    -d "{'start_date':$STARTDATE,'end_date':$ENDDATE}" \
    | json_pp
}

function create-tracker-report {
    # ep create-tracker-report: Create a payment log report
    # Prompt user for input
    echo "Enter a start date (eg: 2016-10-01):"
    read -r STARTDATE
    echo "Enter an end date (eg: 2016-10-31):"
    read -r ENDDATE

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/reports/tracker/"$REPORT" \
    -u "$EASYPOST_CLI_API_KEY": \
    -d "{'start_date':$STARTDATE,'end_date':$ENDDATE}" \
    | json_pp
}

function retrieve-payment-log-report {
    # ep retrieve-payment-log-report: Retrieve a single payment log report
    # Prompt user for input
    echo "Enter report ID:"
    read -r REPORT

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/report/payment_log/"$REPORT" \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-refund-report {
    # ep retrieve-refund-report: Retrieve a single payment log report
    # Prompt user for input
    echo "Enter report ID:"
    read -r REPORT

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/report/refund/"$REPORT" \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-shipment-report {
    # ep retrieve-shipment-report: Retrieve a single payment log report
    # Prompt user for input
    echo "Enter report ID:"
    read -r REPORT

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/report/shipment/"$REPORT" \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-tracker-report {
    # ep retrieve-tracker-report: Retrieve a single payment log report
    # Prompt user for input
    echo "Enter report ID:"
    read -r REPORT

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/report/tracker/"$REPORT" \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-payment-log-reports {
    # ep retrieve-payment-log-reports: Retrieve a list of payment log reports

    # TODO: Add date and page_size options

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/reports/payment_log \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-refund-reports {
    # ep retrieve-refund-reports: Retrieve a list of payment log reports

    # TODO: Add date and page_size options

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/reports/refund \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-shipment-reports {
    # ep retrieve-shipment-reports: Retrieve a list of payment log reports

    # TODO: Add date and page_size options

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/reports/shipment \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-tracker-reports {
    # ep retrieve-tracker-reports: Retrieve a list of payment log reports

    # TODO: Add date and page_size options

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/reports/tracker \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function manifest-batch {
    # ep manifest-batch: Manifest or scanform a batch
    echo "Enter a batch ID you'd like to manifest:"
    read -r BATCH
    
    # Build curl request
    curl -s -X POST "$EASYPOST_API_URL"/batches/"$BATCH"/scan_form \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-scanform {
    # ep retrieve-scanform: Retrieve a single scanform
    echo "Enter a scanform ID:"
    read -r SCANFORM
    
    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/scan_forms/"$SCANFORM" \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-scanforms {
    # ep retrieve-scanforms: Retrieve a list of scanforms

    # TODO: Add date and page_size options
    
    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/scan_forms \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function create-refund {
    # ep create-refund: Create a return shipment that swaps the to and from addresses on the label
    # Prompt user for input
    echo "Enter a to_address ID:"
    read -r TO_ADDRESS
    echo "Enter a from_address ID:"
    read -r FROM_ADDRESS
    echo "Enter a parcel ID:"
    read -r PARCEL

    # Build curl request
    curl -s -X POST "$EASYPOST_API_URL"/shipments \
    -u "$EASYPOST_CLI_API_KEY": \
    -d "shipment[to_address][id]=$TO_ADDRESS" \
    -d "shipment[from_address][id]=$FROM_ADDRESS" \
    -d "shipment[parcel][id]=$PARCEL" \
    -d "shipment[is_return]=true" \
    | json_pp
}

function create-shipment {
    # ep create-shipment: Create a shipment record that can then be used to purchase a label
    # Prompt user for input
    echo "Enter to_street1:"
    read -r TO_STREET1
    echo "Enter to_street2 (optional):"
    read -r TO_STREET2
    echo "Enter to_city:"
    read -r TO_CITY
    echo "Enter to_state:"
    read -r TO_STATE
    echo "Enter to_zip:"
    read -r TO_ZIP
    echo "Enter to_country (optional):"
    read -r TO_COUNTRY
    echo "Enter to_name (optional):"
    read -r TO_NAME
    echo "Enter to_company (optional):"
    read -r TO_COMPANY
    echo "Enter to_phone (optional):"
    read -r TO_PHONE
    echo "Enter to_email (optional):"
    read -r TO_EMAIL

    echo "Enter from_street1:"
    read -r FROM_STREET1
    echo "Enter from_street2 (optional):"
    read -r FROM_STREET2
    echo "Enter from_city:"
    read -r FROM_CITY
    echo "Enter from_state:"
    read -r FROM_STATE
    echo "Enter from_zip:"
    read -r FROM_ZIP
    echo "Enter from_country (optional):"
    read -r FROM_COUNTRY
    echo "Enter from_name (optional):"
    read -r FROM_NAME
    echo "Enter from_company (optional):"
    read -r FROM_COMPANY
    echo "Enter from_phone (optional):"
    read -r FROM_PHONE
    echo "Enter from_email (optional):"
    read -r FROM_EMAIL

    echo "Enter parcel length:"
    read -r LENGTH
    echo "Enter parcel width:"
    read -r WIDTH
    echo "Enter parcel height:"
    read -r HEIGHT
    echo "Enter parcel weight:"
    read -r WEIGHT

    # Build curl request
    curl -s -X POST "$EASYPOST_API_URL"/shipments \
    -u "$EASYPOST_CLI_API_KEY": \
    -d "address[to_address][street1]=$TO_STREET1" \
    -d "address[to_address][street2]=$TO_STREET2" \
    -d "address[to_address][city]=$TO_CITY" \
    -d "address[to_address][state]=$TO_STATE" \
    -d "address[to_address][zip]=$TO_ZIP" \
    -d "address[to_address][country]=$TO_COUNTRY" \
    -d "address[to_address][name]=$TO_NAME" \
    -d "address[to_address][company]=$TO_COMPANY" \
    -d "address[to_address][phone]=$TO_PHONE" \
    -d "address[to_address][email]=$TO_EMAIL" \
    -d "address[from_address][street1]=$FROM_STREET1" \
    -d "address[from_address][street2]=$FROM_STREET2" \
    -d "address[from_address][city]=$FROM_CITY" \
    -d "address[from_address][state]=$FROM_STATE" \
    -d "address[from_address][zip]=$FROM_ZIP" \
    -d "address[from_address][country]=$FROM_COUNTRY" \
    -d "address[from_address][name]=$FROM_NAME" \
    -d "address[from_address][company]=$FROM_COMPANY" \
    -d "address[from_address][phone]=$FROM_PHONE" \
    -d "address[from_address][email]=$FROM_EMAIL" \
    -d "parcel[length]=$LENGTH" \
    -d "parcel[width]=$WIDTH" \
    -d "parcel[height]=$HEIGHT" \
    -d "parcel[weight]=$WEIGHT" \
    | json_pp
}

function retrieve-shipment {
    # ep retrieve-shipment: Retrieve a shipment record
    # Prompt user for input
    echo "Enter shipment ID:"
    read -r SHIPMENT

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/shipments/"$SHIPMENT" \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-shipments {
    # ep retrieve-shipments: Retrieve a list of shipments

    # TODO: Add date and page_size options

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/shipments \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function create-tracker {
    # ep create-tracker: Create a tracker for a shipment
    # Prompt user for input
    echo "Enter tracking code:"
    read -r TRACKER
    echo "Enter carrier (optional):"
    read -r CARRIER

    # Build curl request
    curl -s -X POST "$EASYPOST_API_URL"/trackers \
    -u "$EASYPOST_CLI_API_KEY": \
    -d "tracker[tracking_code]=$TRACKER" \
    -d "tracker[carrier]=$CARRIER" \
    | json_pp
}

function retrieve-tracker {
    # ep retrieve-tracker: Retrieve a tracker record
    # Prompt user for input
    echo "Enter tracker ID:"
    read -r TRACKER

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/trackers/"$TRACKER" \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-trackers {
    # ep retrieve-trackers: Retrieve a list of trackers

    # TODO: Add date and page_size options

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/trackers \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function create-webhook {
    # ep create-webhooks: Create a webhook
    # Prompt user for input
    echo "Enter the webhook URL:"
    read -r WEBHOOK

    # Build curl request
    curl -s -X POST "$EASYPOST_API_URL"/webhooks \
    -u "$EASYPOST_CLI_API_KEY": \
    -d "webhook[url]=$WEBHOOK" \
    | json_pp
}

function delete-webhook {
    # ep delete-webhook: Enables a Webhook that has been disabled.
    # Prompt user for input
    echo "Enter a webhook ID:"
    read -r WEBHOOK

    # Build curl request
    curl -s -X DELETE "$EASYPOST_API_URL"/webhooks/"$WEBHOOK" \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-webhook {
    # ep retrieve-webhook: Retrieve a list of webhooks
    # Prompt user for input
    echo "Enter a webhook ID:"
    read -r WEBHOOK

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/webhooks/"$WEBHOOK" \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function retrieve-webhooks {
    # ep retrieve-webhooks: Retrieve a list of webhooks

    # Build curl request
    curl -s -X GET "$EASYPOST_API_URL"/webhooks \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

function update-webhook {
    # ep update-webhook: Enables a Webhook that has been disabled.
    # Prompt user for input
    echo "Enter a webhook ID:"
    read -r WEBHOOK

    # Build curl request
    curl -s -X PUT "$EASYPOST_API_URL"/webhooks/"$WEBHOOK" \
    -u "$EASYPOST_CLI_API_KEY": \
    | json_pp
}

# Command Router
# Check if the command passed is valid or not. Run if it is, warn if it is not
if declare -f "$1" > /dev/null
then
  # Pass in the argument (command)
  "$@"
else
  # Tell the user their command is not valid
  echo "'$1' is not an EasyPost CLI command, please try again." >&2
  exit 1
fi
